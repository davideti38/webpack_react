/* ===========================
   functions
   =========================== */


// Import if google Fonts URL is defined

@if variable-exists(font-url--google) {
	@import url($font-url--google);
}


// img link

@function img-path($name, $extention : 'png') {
  $url:url("../img/#{$name}.#{$extention}");
  @return  $url;
}


@function is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value))
       or (index(auto initial inherit 0, $value) != false);
}

//Call the color palette modifiers in color values

@function palette($palette, $shade: 'base') {
  @return map-get(map-get($btn-styles, $palette), $shade);
}

 //  Color variation
@function cv($color, $variation: false) {

  // Correctly set $color variable:
  @if map-has-key($base-colors, $color) {
    // $color is in $base-color, set variable = map-value
    $color: map-get($base-colors, $color);
  } @else {
    @if type-of($color) != color {
      // $color is not in $color and $color is not a color

    }
    // $color is a valid color - use it
  }

  @if $variation {
    @if not map-has-key($variations, $variation) {
      // variation is not in $variations

    } @else {
      // make it easier to deal with nested map
      $this-variation: map-get($variations, $variation);
      // $args = $function, $color
      $args: join(map-get($this-variation, function), $color);
      @if map-get($this-variation, parameters) {
        // $args = $function, $base-colors, $parameters
        $args: join($args, map-get($this-variation, parameters));
      }
      //@return $args;
      @return call($args...);
    }
  }
  // no $variation, just return $color
  @return $color;
}

//background:cv($red, shade) ;


@function el($map, $keys: 'size') {
  @return  map-keys(map-get($map, $keys));
}


@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}


@mixin min-tablet {
  @media (min-width: #{$tablet}) {
    @content;
  }
}

@mixin xtablet {
  @media (max-width: #{$xtablet}) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: #{$tablet}) {
    @content;
  }
}


@mixin min-mobile {
  @media (min-width: #{$mobile}) {
    @content;
  }
}


@mixin mobile {
  @media (max-width: #{$mobile}) {
    @content;
  }
}

@mixin min-xsMobile {
  @media (min-width: #{$xsMobile}) {
    @content;
  }
}


@mixin xsMobile {
  @media (max-width: #{$xsMobile}) {
    @content;
  }
}

@mixin min-xxsMobile {
  @media (min-width: #{$xxsMobile}) {
    @content;
  }
}

@mixin xxsMobile {
  @media (max-width: #{$xxsMobile}) {
    @content;
  }
}
