/* ===========================
   Mixins
   =========================== */


// Call color palette modifiers

// @function palette($palette, $shade: 'base') {

// 	@return map-get(map-get($palettes, $palette), $shade);
// }

// Mixims





@mixin img-replace($img, $w, $h, $display: block) {
	background-image  : url('#{$path--rel}/#{$img}');
	background-repeat : no-repeat;
	width             : $w;
	height            : $h;
	display           : $display;

}


// BEM selectors

 @mixin e($element) {
	&__#{$element} {
		@content;
	}
 }

  @mixin m($modifier) {
	&--#{$modifier} {
		@content;
	}
 }

// grid-center


@mixin grid-center($nb-columns, $span) {

	margin-left:  isolate($nb-columns/2) - (span($span -wide) - (gutter() * $span)) /2 ;

}


// text-contrast

@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

  @if abs($color-brightness) < ($light-color/2){
    color: white;
  }

  @else {
    color: #100f0f;
  }
}


// icons

@mixin icon($position: before, $icon: false, $styles: true) {
    @if $position == both {
        $position: 'before, &:after';
    }
    // Either a :before or :after pseudo-element, or both, defaulting to :before
    &:#{$position} {
        @if $icon {
            // A particular icon has been specified
            content: "#{map-get($icons, $icon)}";
        }
        @if $styles {
            // Supportive icon styles required
            speak: none;
            font-style: normal;
            font-weight: normal;
            font-family: 'icons';
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }
}

//pos

@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;                                               // 1

  @each $offset in $offsets {                                        // 3
    $index: index($args, $offset);                                   // 4

    @if $index {                                                     // 5
      @if $index == length($args) {                                  // 6
        #{$offset}: 0;                                               // 7
      }
      @else {                                                        // 8
        $next: nth($args, $index + 1);                               // 9
        @if is-valid-length($next) {                                 // 10
          #{$offset}: $next;                                         // 11
        }
        @else if index($offsets, $next) {                            // 12
          #{$offset}: 0;                                             // 13
        }
        @else {                                                      // 14
          @warn "Invalid value `#{$next}` for offset `#{$offset}`."; // 15
        }
      }
    }
  }
}

// pos Shorthands
// ---

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}

@mixin fixed($args: ()) {
  @include position(fixed, $args);
}

@mixin relative($args: ()) {
  @include position(relative, $args);
}


// center any block

@mixin center-both($width: null, $height: null) {
  position: absolute;
  top: 50%;
  left: 50%;

  @if not $width and not $height {
    transform: translate(-50%, -50%);
  } @else if $width and $height {
    width: $width;
    height: $height;
    margin: -($width / 2) #{0 0} -($height / 2)
  } @else if not $height {
    width: $width;
    margin-left: -($width / 2);
    transform: translateY(-50%);
  } @else {
    height: $height;
    margin-top: -($height / 2);
    transform: translateX(-50%);
  }
}



// shape
// http://codepen.io/unax3/pen/BhCLi

@mixin shape($shape, $size, $color){
  @if $shape == square {
    width: $size;
    height: $size;
    background-color: $color;
  }
  @if $shape == circle {
    width: $size;
    height: $size;
    background-color: $color;
    border-radius: 50%;
  }
  @if $shape == triangle {
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size*1.5 solid $color;
  }
  @if $shape == right-triangle {
    width: 0;
    height: 0;
    border-bottom: $size solid $color;
    border-right: $size solid transparent;
  }
    @if $shape == left-triangle {
    width: 0;
    height: 0;
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }
  @if $shape == diamond {
    width: $size;
    height: $size;
    transform :rotate(-45deg);
    overflow: hidden;
    position: relative;
    text-decoration: none;
    background:$color;
  }
  @if $shape == pentagon {
    position: relative;
    width: $size;
    border-width: (25/27)*$size (1/3)*$size 0;
    border-style: solid;
    border-color: $color transparent;

    &:before {
      content: "";
      position: absolute;
      height: 0;
      width: 0;
      top: (-17/11)*$size;
      left: (-1/3)*$size;
      border-width: 0 (5/6)*$size (35/54)*$size;
      border-style: solid;
      border-color: transparent transparent $color;
    }
  }
  @if $shape == hexagon {
    width: $size*2;
    height: $size*1.1;
    background: $color;
    position: relative;
    &:before {
      content: "";
      position: absolute;
      top: $size/-2;
      left: 0;
      width: 0;
      height: 0;
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size/2 solid $color;
    }
    &:after {
      content: "";
      position: absolute;
      bottom: $size/-2;
      left: 0;
      width: 0;
      height: 0;
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-top: $size/2 solid $color;
    }
  }
  @if shape == octogon {
    width: $size;
    height: $size;
    background: transparent;
    position: relative;
    text-align: center;

    &:before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      border-bottom: 29/$size solid $color;
      border-left: 29/$size solid transparent;
      border-right: 29/$size solid transparent;
      width: 42/$size;
      height: 0;
    }

    &:after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      border-top: 29/$size solid $color;
      border-left: 29/$size solid transparent;
      border-right: 29/$size solid transparent;
      width: 42/$size;
      height: 0;
    }
  }
}

// center to axis
@mixin center-axis($axis: "both",$posTop: 50%){ position:absolute; @if $axis == "y"{ top:50%; -webkit-transform: translateY(-50%); -moz-transform: translateY(-50%); -ms-transform: translateY(-50%); -o-transform: translateY(-50%); transform: translateY(-50%); } @if $axis == "x"{ left:50%; -webkit-transform: translateX(-50%); -moz-transform: translateX(-50%); -ms-transform: translateX(-50%); -o-transform: translateX(-50%); transform: translateX(-50%); } @if $axis == "both"{ top:$posTop; left:50%; -webkit-transform: translate(-50%, -50%); -moz-transform: translate(-50%, -50%); -ms-transform: translate(-50%, -50%); -o-transform: translate(-50%, -50%); transform: translate(-50%, -50%); }
}


// define size in one line

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
//  @include size(32px); @include size(100%, 10em);;

